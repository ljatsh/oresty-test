
# sample 1
# worker_processes  1;
# error_log logs/error.log;
# events {
#     worker_connections 1024;
# }
# http {
#     init_by_lua_block {
#         local cjson = require('cjson')

#         ngx.log(ngx.ERR, 'content_by_lua_block', tostring(cjson))
#         print('init_by_lua_block', tostring(cjson))

#         local name = 'lj@sh'
#         sex = 'man'
#     }

#     init_worker_by_lua_block {
#         local delay = 3  -- in seconds
#         local new_timer = ngx.timer.at
#         local log = ngx.log
#         local ERR = ngx.ERR
#         local check

#         check = function(premature)
#             if not premature then
#                 log(ERR, 'check was called')
#                 -- do the health check or other routine work
#                 local ok, err = new_timer(delay, check)
#                 if not ok then
#                     log(ERR, "failed to create timer: ", err)
#                     return
#                 end
#             end
#         end

#         local hdl, err = new_timer(delay, check)
#         if not hdl then
#             log(ERR, "failed to create timer: ", err)
#             return
#         end
#     }

#     server {
#         listen 8080;
#         location / {
#             default_type text/html;
#             content_by_lua_block {
#                 ngx.say("<p>hello, world</p>")

#                 local cjson = require('cjson')
#                 ngx.log(ngx.ERR, 'content_by_lua_block', tostring(cjson), '^')

#                 ngx.print(name, ' ', sex)
#                 ngx.print(cjson.encode({hello="world"}))
#             }
#         }
#     }

#     # local desc = {}
#     # for k, v in pairs(ngx) do
#     #     desc[#desc + 1] = {k, v}
#     # end
#     # table.sort(desc, function(a, b) return a[1] < b[1] end)
#     # for k, v in  ipairs(desc) do
#     #     ngx.say(string.format("%s %s", v[1], v[2]))
#     # end
# }

#sample 2
events {
    worker_connections 1024;
}

stream {
    preread_by_lua_block {
        ngx.log(ngx.ERR, 'preread_by_lua_block ', tostring(coroutine.running()))
        ngx.say('Welcome...')
    }

    # define a TCP server listening on the port 1234:
    server {
        listen 1234;

        content_by_lua_block {
            ngx.log(ngx.ERR, 'content by lua block ', tostring(coroutine.running()))
            
            local socket = ngx.req.socket(true)
            local data = socket:receive()
            if data == 'thunder' then
                ngx.say('flash!')
            else
                ngx.say('boom!')
            end
            ngx.sleep(3)
            ngx.say('the end ...')
        }
    }
}